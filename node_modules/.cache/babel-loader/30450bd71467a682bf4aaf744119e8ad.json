{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/learnacademy/Desktop/portfolio-projects/tic-tac-toe-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Square from './components/Square';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.winCheck = squares => {\n      let {\n        winner\n      } = this.state; // possible win condition index combinations\n\n      const winConditions = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [2, 4, 6], [0, 4, 8]]; // go through all subarrays of the win conditions\n\n      for (let i = 0; i < winConditions.length; i++) {\n        // destructor the values at each subarray to simply a, b, c\n        const [a, b, c] = winConditions[i]; // check if the symbol of 'X' or 'O' is the same at locations a, b, and c\n        // if the same symbol is found in the given winning conditions, then return the winner symbol\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          console.log(`winner: ${squares[a]}`);\n          return this.winnerMessage(squares[a]);\n        } else if (!squares.includes(\" \") && winner === null) {\n          return this.setState({\n            winner: \"*meow* ðŸ™€ CATS GAME.\"\n          });\n        }\n      }\n\n      return null;\n    };\n\n    this.handleChange = i => {\n      let {\n        squares,\n        currentPlayer\n      } = this.state;\n\n      if (squares[i] !== \" \") {\n        console.log(\"bailed early\");\n        return;\n      } else if (currentPlayer === 0) {\n        squares[i] = \"O\"; // call functin\n\n        this.winCheck(squares);\n        currentPlayer = 1;\n      } else {\n        squares[i] = \"X\";\n        this.winCheck(squares);\n        currentPlayer = 0;\n      } // console.log(`current player: ${currentPlayer}`)\n      // console.log(`squares array: ${squares}`)\n\n\n      this.setState({\n        squares: squares,\n        currentPlayer: currentPlayer\n      });\n    };\n\n    this.winnerMessage = win => {\n      // console.log(`squares array: ${squares}`)\n      if (win === 'X') {\n        this.setState({\n          winner: \"X is the WINNER!\"\n        });\n      } else if (win === 'O') {\n        this.setState({\n          winner: \"O is the WINNER!\"\n        });\n      }\n    };\n\n    this.handleRestart = () => {\n      window.location.reload();\n    };\n\n    this.state = {\n      squares: [...Array(9).fill(\" \")],\n      currentPlayer: 1,\n      winner: null\n    };\n  } //get indexes of all X so we have a new array of the index[X] and compare to winCondition\n\n\n  render() {\n    let {\n      squares\n    } = this.state;\n    let grid = squares.map((square, index) => {\n      return /*#__PURE__*/_jsxDEV(Square, {\n        handleChange: this.handleChange,\n        square: square,\n        index: index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tic Tac Toe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\" \", this.state.winner !== null ? this.state.winner : `Current Player : ${this.state.currentPlayer === 1 ? \"X\" : \"O\"}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"gameBoard\",\n        children: grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"restart-button\",\n        onClick: this.handleRestart,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/portfolio-projects/tic-tac-toe-app/src/App.js"],"names":["React","Component","Square","App","constructor","props","winCheck","squares","winner","state","winConditions","i","length","a","b","c","console","log","winnerMessage","includes","setState","handleChange","currentPlayer","win","handleRestart","window","location","reload","Array","fill","render","grid","map","square","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Square from './components/Square'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      squares: [...Array(9).fill(\" \")],\n      currentPlayer: 1,\n      winner: null,\n    }\n  }\n  \n  //get indexes of all X so we have a new array of the index[X] and compare to winCondition\n  winCheck = (squares) => {\n    let { winner } = this.state\n    // possible win condition index combinations\n    const winConditions = [\n      [0,1,2],\n      [3,4,5],\n      [6,7,8],\n      [0,3,6],\n      [1,4,7],\n      [2,5,8],\n      [2,4,6],\n      [0,4,8]\n    ]\n    // go through all subarrays of the win conditions\n    for (let i = 0; i < winConditions.length; i++) {\n      // destructor the values at each subarray to simply a, b, c\n      const [a, b, c] = winConditions[i]\n      // check if the symbol of 'X' or 'O' is the same at locations a, b, and c\n      // if the same symbol is found in the given winning conditions, then return the winner symbol\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        console.log(`winner: ${squares[a]}`)\n        return this.winnerMessage(squares[a])\n      } else if (!squares.includes(\" \") && winner === null) {\n        return this.setState({winner: \"*meow* ðŸ™€ CATS GAME.\"})\n      }\n    }\n    return null\n  }\n\n  handleChange = (i) => {\n    let { squares, currentPlayer} = this.state\n    if(squares[i] !== \" \" ){\n      console.log(\"bailed early\")\n      return \n    } else if (currentPlayer === 0 ) {\n      squares[i] = \"O\"\n      // call functin\n      this.winCheck(squares)\n      currentPlayer = 1 \n    } else {\n      squares[i] = \"X\"\n      this.winCheck(squares)\n      currentPlayer = 0\n    }\n    // console.log(`current player: ${currentPlayer}`)\n    // console.log(`squares array: ${squares}`)\n    this.setState({squares: squares, currentPlayer: currentPlayer})\n  }\n\n  winnerMessage = (win) => {\n    // console.log(`squares array: ${squares}`)\n    if (win === 'X') {\n      this.setState({winner: \"X is the WINNER!\"})\n    } else if (win === 'O') {\n      this.setState({winner: \"O is the WINNER!\"})\n    }\n  }\n\n  handleRestart = () => {\n    window.location.reload()\n  }\n\n  render(){\n    let { squares } = this.state\n    let grid = squares.map((square, index) => {\n      return (\n        <Square \n        handleChange = { this.handleChange }\n        square = { square }\n        index = { index }\n        key = { index }\n        />\n      )\n    })\n    return(\n      <React.Fragment>\n        <h1>Tic Tac Toe</h1>\n        <h2> { this.state.winner !== null? this.state.winner : `Current Player : ${this.state.currentPlayer === 1? \"X\" : \"O\"}` }</h2>\n        <div id=\"gameBoard\">\n          { grid }\n        </div>\n        <button\n          id=\"restart-button\"\n          onClick = {this.handleRestart}>Restart Game</button>\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}